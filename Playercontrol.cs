//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Playercontrol.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Playercontrol : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Playercontrol()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Playercontrol"",
    ""maps"": [
        {
            ""name"": ""Playermove"",
            ""id"": ""c5a667d3-1373-45ba-a11e-1bb6ba1f992d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f81c036e-b551-4947-91b5-ad20b6f0ca52"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ee9a2005-62d9-4fa8-85da-a5c37cb7d52c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Lock on Left"",
                    ""type"": ""Button"",
                    ""id"": ""3e8b4ba9-9478-4324-bbed-e165bb0b6358"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lock on Right"",
                    ""type"": ""Button"",
                    ""id"": ""e39cc0ff-c45a-4735-904d-72e921c2bfd8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""8d1afec5-c90a-4454-a544-2f5f2ba4eadf"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d19a9257-2bb4-488b-af87-8f5775f2f9e2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""de48990c-d7dc-4a88-b79e-5c06e18b4877"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d3b83a91-d573-4f7d-b1f6-8d0bbf6a43c1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b8416454-4f67-46af-bd8b-5e6e5bf8237e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""01091f25-9720-45a0-990d-ea873d83b69a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2cb3b538-3869-42c9-82df-93dae725927c"",
                    ""path"": ""<Keyboard>/leftBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock on Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c2d5d38-e48a-4aac-9494-875cd42198aa"",
                    ""path"": ""<Keyboard>/rightBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock on Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Playeraction"",
            ""id"": ""e812d23c-f7f0-4bdb-bfe3-91cb5c35ef50"",
            ""actions"": [
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""e967136f-28b7-4a43-a2cc-fd177937dc29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RB"",
                    ""type"": ""Button"",
                    ""id"": ""a2608a46-f5e0-4b3b-a575-b962c626a1d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RT"",
                    ""type"": ""Button"",
                    ""id"": ""2a7a5383-50d4-4db5-b221-928365c8ed60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""f70a07ab-e32a-43fb-8f2e-49eecda7145d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""0c1ca1be-69c7-41e3-b1d3-9f27bcbd28d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""09a6240d-aca4-4d2d-ba56-71ab54a0edc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lockon"",
                    ""type"": ""Button"",
                    ""id"": ""8a1b5be1-344a-4db7-9dd0-59427210e385"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8dc0dc44-2614-474c-a39a-439742689e56"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""052fecfd-9a91-4e1b-bf83-2134035db270"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7b600c1-e5a4-4910-bcbd-0881f064502f"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""955f87c9-18a6-4bad-8b9c-1d724fa2d8c5"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54fbc75a-14b4-4205-acfa-15104ac3afd0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05cbd43b-fe02-466e-9978-6106a93d9458"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd362b5b-4635-4fcf-a337-b17a86224ef9"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lockon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerQuickSlots"",
            ""id"": ""e8f115b6-cc32-48b0-aea2-ae4bfdddc979"",
            ""actions"": [
                {
                    ""name"": ""Dpadright"",
                    ""type"": ""Button"",
                    ""id"": ""b88af086-57a9-4671-8d52-cbac9661eee7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dpadleft"",
                    ""type"": ""Button"",
                    ""id"": ""dc110262-4ae2-4cfe-8342-7e792cc09e44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dpadup"",
                    ""type"": ""Button"",
                    ""id"": ""300c8f4d-596a-4322-b178-628a53a292e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dpaddown"",
                    ""type"": ""Button"",
                    ""id"": ""442108bf-b962-47e2-9c30-0848790a0772"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fa6bca2b-a2f4-4533-8528-2f946cc3023f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dpadright"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b808a0bf-6a52-4ecc-974c-431b663b326b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dpadleft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22f717ae-ec7f-413b-893a-e4d4d0cb0164"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dpadup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f94c1fd9-f9cf-487a-baa0-4c8bb459331b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dpaddown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Playermove
        m_Playermove = asset.FindActionMap("Playermove", throwIfNotFound: true);
        m_Playermove_Movement = m_Playermove.FindAction("Movement", throwIfNotFound: true);
        m_Playermove_Camera = m_Playermove.FindAction("Camera", throwIfNotFound: true);
        m_Playermove_LockonLeft = m_Playermove.FindAction("Lock on Left", throwIfNotFound: true);
        m_Playermove_LockonRight = m_Playermove.FindAction("Lock on Right", throwIfNotFound: true);
        // Playeraction
        m_Playeraction = asset.FindActionMap("Playeraction", throwIfNotFound: true);
        m_Playeraction_Sprint = m_Playeraction.FindAction("Sprint", throwIfNotFound: true);
        m_Playeraction_RB = m_Playeraction.FindAction("RB", throwIfNotFound: true);
        m_Playeraction_RT = m_Playeraction.FindAction("RT", throwIfNotFound: true);
        m_Playeraction_A = m_Playeraction.FindAction("A", throwIfNotFound: true);
        m_Playeraction_Jump = m_Playeraction.FindAction("Jump", throwIfNotFound: true);
        m_Playeraction_Inventory = m_Playeraction.FindAction("Inventory", throwIfNotFound: true);
        m_Playeraction_Lockon = m_Playeraction.FindAction("Lockon", throwIfNotFound: true);
        // PlayerQuickSlots
        m_PlayerQuickSlots = asset.FindActionMap("PlayerQuickSlots", throwIfNotFound: true);
        m_PlayerQuickSlots_Dpadright = m_PlayerQuickSlots.FindAction("Dpadright", throwIfNotFound: true);
        m_PlayerQuickSlots_Dpadleft = m_PlayerQuickSlots.FindAction("Dpadleft", throwIfNotFound: true);
        m_PlayerQuickSlots_Dpadup = m_PlayerQuickSlots.FindAction("Dpadup", throwIfNotFound: true);
        m_PlayerQuickSlots_Dpaddown = m_PlayerQuickSlots.FindAction("Dpaddown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Playermove
    private readonly InputActionMap m_Playermove;
    private IPlayermoveActions m_PlayermoveActionsCallbackInterface;
    private readonly InputAction m_Playermove_Movement;
    private readonly InputAction m_Playermove_Camera;
    private readonly InputAction m_Playermove_LockonLeft;
    private readonly InputAction m_Playermove_LockonRight;
    public struct PlayermoveActions
    {
        private @Playercontrol m_Wrapper;
        public PlayermoveActions(@Playercontrol wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Playermove_Movement;
        public InputAction @Camera => m_Wrapper.m_Playermove_Camera;
        public InputAction @LockonLeft => m_Wrapper.m_Playermove_LockonLeft;
        public InputAction @LockonRight => m_Wrapper.m_Playermove_LockonRight;
        public InputActionMap Get() { return m_Wrapper.m_Playermove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayermoveActions set) { return set.Get(); }
        public void SetCallbacks(IPlayermoveActions instance)
        {
            if (m_Wrapper.m_PlayermoveActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayermoveActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayermoveActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayermoveActionsCallbackInterface.OnMovement;
                @Camera.started -= m_Wrapper.m_PlayermoveActionsCallbackInterface.OnCamera;
                @Camera.performed -= m_Wrapper.m_PlayermoveActionsCallbackInterface.OnCamera;
                @Camera.canceled -= m_Wrapper.m_PlayermoveActionsCallbackInterface.OnCamera;
                @LockonLeft.started -= m_Wrapper.m_PlayermoveActionsCallbackInterface.OnLockonLeft;
                @LockonLeft.performed -= m_Wrapper.m_PlayermoveActionsCallbackInterface.OnLockonLeft;
                @LockonLeft.canceled -= m_Wrapper.m_PlayermoveActionsCallbackInterface.OnLockonLeft;
                @LockonRight.started -= m_Wrapper.m_PlayermoveActionsCallbackInterface.OnLockonRight;
                @LockonRight.performed -= m_Wrapper.m_PlayermoveActionsCallbackInterface.OnLockonRight;
                @LockonRight.canceled -= m_Wrapper.m_PlayermoveActionsCallbackInterface.OnLockonRight;
            }
            m_Wrapper.m_PlayermoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Camera.started += instance.OnCamera;
                @Camera.performed += instance.OnCamera;
                @Camera.canceled += instance.OnCamera;
                @LockonLeft.started += instance.OnLockonLeft;
                @LockonLeft.performed += instance.OnLockonLeft;
                @LockonLeft.canceled += instance.OnLockonLeft;
                @LockonRight.started += instance.OnLockonRight;
                @LockonRight.performed += instance.OnLockonRight;
                @LockonRight.canceled += instance.OnLockonRight;
            }
        }
    }
    public PlayermoveActions @Playermove => new PlayermoveActions(this);

    // Playeraction
    private readonly InputActionMap m_Playeraction;
    private IPlayeractionActions m_PlayeractionActionsCallbackInterface;
    private readonly InputAction m_Playeraction_Sprint;
    private readonly InputAction m_Playeraction_RB;
    private readonly InputAction m_Playeraction_RT;
    private readonly InputAction m_Playeraction_A;
    private readonly InputAction m_Playeraction_Jump;
    private readonly InputAction m_Playeraction_Inventory;
    private readonly InputAction m_Playeraction_Lockon;
    public struct PlayeractionActions
    {
        private @Playercontrol m_Wrapper;
        public PlayeractionActions(@Playercontrol wrapper) { m_Wrapper = wrapper; }
        public InputAction @Sprint => m_Wrapper.m_Playeraction_Sprint;
        public InputAction @RB => m_Wrapper.m_Playeraction_RB;
        public InputAction @RT => m_Wrapper.m_Playeraction_RT;
        public InputAction @A => m_Wrapper.m_Playeraction_A;
        public InputAction @Jump => m_Wrapper.m_Playeraction_Jump;
        public InputAction @Inventory => m_Wrapper.m_Playeraction_Inventory;
        public InputAction @Lockon => m_Wrapper.m_Playeraction_Lockon;
        public InputActionMap Get() { return m_Wrapper.m_Playeraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayeractionActions set) { return set.Get(); }
        public void SetCallbacks(IPlayeractionActions instance)
        {
            if (m_Wrapper.m_PlayeractionActionsCallbackInterface != null)
            {
                @Sprint.started -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnSprint;
                @RB.started -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnRB;
                @RB.performed -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnRB;
                @RB.canceled -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnRB;
                @RT.started -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnRT;
                @RT.performed -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnRT;
                @RT.canceled -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnRT;
                @A.started -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnA;
                @A.performed -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnA;
                @A.canceled -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnA;
                @Jump.started -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnJump;
                @Inventory.started -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnInventory;
                @Lockon.started -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnLockon;
                @Lockon.performed -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnLockon;
                @Lockon.canceled -= m_Wrapper.m_PlayeractionActionsCallbackInterface.OnLockon;
            }
            m_Wrapper.m_PlayeractionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @RB.started += instance.OnRB;
                @RB.performed += instance.OnRB;
                @RB.canceled += instance.OnRB;
                @RT.started += instance.OnRT;
                @RT.performed += instance.OnRT;
                @RT.canceled += instance.OnRT;
                @A.started += instance.OnA;
                @A.performed += instance.OnA;
                @A.canceled += instance.OnA;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
                @Lockon.started += instance.OnLockon;
                @Lockon.performed += instance.OnLockon;
                @Lockon.canceled += instance.OnLockon;
            }
        }
    }
    public PlayeractionActions @Playeraction => new PlayeractionActions(this);

    // PlayerQuickSlots
    private readonly InputActionMap m_PlayerQuickSlots;
    private IPlayerQuickSlotsActions m_PlayerQuickSlotsActionsCallbackInterface;
    private readonly InputAction m_PlayerQuickSlots_Dpadright;
    private readonly InputAction m_PlayerQuickSlots_Dpadleft;
    private readonly InputAction m_PlayerQuickSlots_Dpadup;
    private readonly InputAction m_PlayerQuickSlots_Dpaddown;
    public struct PlayerQuickSlotsActions
    {
        private @Playercontrol m_Wrapper;
        public PlayerQuickSlotsActions(@Playercontrol wrapper) { m_Wrapper = wrapper; }
        public InputAction @Dpadright => m_Wrapper.m_PlayerQuickSlots_Dpadright;
        public InputAction @Dpadleft => m_Wrapper.m_PlayerQuickSlots_Dpadleft;
        public InputAction @Dpadup => m_Wrapper.m_PlayerQuickSlots_Dpadup;
        public InputAction @Dpaddown => m_Wrapper.m_PlayerQuickSlots_Dpaddown;
        public InputActionMap Get() { return m_Wrapper.m_PlayerQuickSlots; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerQuickSlotsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerQuickSlotsActions instance)
        {
            if (m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface != null)
            {
                @Dpadright.started -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadright;
                @Dpadright.performed -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadright;
                @Dpadright.canceled -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadright;
                @Dpadleft.started -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadleft;
                @Dpadleft.performed -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadleft;
                @Dpadleft.canceled -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadleft;
                @Dpadup.started -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadup;
                @Dpadup.performed -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadup;
                @Dpadup.canceled -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadup;
                @Dpaddown.started -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpaddown;
                @Dpaddown.performed -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpaddown;
                @Dpaddown.canceled -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpaddown;
            }
            m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Dpadright.started += instance.OnDpadright;
                @Dpadright.performed += instance.OnDpadright;
                @Dpadright.canceled += instance.OnDpadright;
                @Dpadleft.started += instance.OnDpadleft;
                @Dpadleft.performed += instance.OnDpadleft;
                @Dpadleft.canceled += instance.OnDpadleft;
                @Dpadup.started += instance.OnDpadup;
                @Dpadup.performed += instance.OnDpadup;
                @Dpadup.canceled += instance.OnDpadup;
                @Dpaddown.started += instance.OnDpaddown;
                @Dpaddown.performed += instance.OnDpaddown;
                @Dpaddown.canceled += instance.OnDpaddown;
            }
        }
    }
    public PlayerQuickSlotsActions @PlayerQuickSlots => new PlayerQuickSlotsActions(this);
    public interface IPlayermoveActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
        void OnLockonLeft(InputAction.CallbackContext context);
        void OnLockonRight(InputAction.CallbackContext context);
    }
    public interface IPlayeractionActions
    {
        void OnSprint(InputAction.CallbackContext context);
        void OnRB(InputAction.CallbackContext context);
        void OnRT(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnLockon(InputAction.CallbackContext context);
    }
    public interface IPlayerQuickSlotsActions
    {
        void OnDpadright(InputAction.CallbackContext context);
        void OnDpadleft(InputAction.CallbackContext context);
        void OnDpadup(InputAction.CallbackContext context);
        void OnDpaddown(InputAction.CallbackContext context);
    }
}
